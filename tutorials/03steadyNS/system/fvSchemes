/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.4.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default steadyState;
}

gradSchemes
{
    default         Gauss linear;
    grad(p)         Gauss linear;
    grad(U)         Gauss linear;
}

divSchemes
{
    default         Gauss linear upwind;
    div((interpolate(Ulift0)&S),Ulift0) bounded Gauss upwind;
    div((interpolate(Ulift0)&S),Ulift1) bounded Gauss upwind;
    div((interpolate(Ulift0)&S),U) bounded Gauss upwind;
    div((interpolate(Ulift1)&S),Ulift0) bounded Gauss upwind;
    div((interpolate(Ulift1)&S),Ulift1) bounded Gauss upwind;
    div((interpolate(Ulift1)&S),U) bounded Gauss upwind;
    div((interpolate(U)&S),Ulift0) bounded Gauss upwind;
    div((interpolate(U)&S),Ulift1) bounded Gauss upwind;
    div((interpolate(U)&S),U) bounded Gauss upwind;
    div(phi,U)      bounded Gauss upwind;
    div(phi,k)      bounded Gauss upwind;
    div(phi,omega)  bounded Gauss upwind;
    div((nuEff*dev(T(grad(U))))) Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         corrected;
}

fluxRequired
{
    default         no;
    p;
    Phi;
}

// ************************************************************************* //
